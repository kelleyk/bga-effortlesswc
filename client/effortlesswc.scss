/*
 *------
 * BGA framework: Gregory Isabelli & Emmanuel Colin & BoardGameArena
 * EffortlessWC implementation : © Kevin Kelley <kelleyk@kelleyk.net>
 *
 * This code has been produced on the BGA studio platform for use on http://boardgamearena.com.
 * See http://en.boardgamearena.com/#!doc/Studio for more information.
 * -----
 */

/*
	This is the CSS stylesheet of your game User Interface.

	Styles defined on this file will be applied to the HTML elements you define in your
	HTML template (*.tpl), and to HTML elements you create dynamically (in effortlesswc.js).

	Usually, you are using CSS to:

	1°) define the overall layout of your game (ex: place the board on the top left, place player's hand beside, place the deck on the right, ...).

	2°) create your CSS-sprites: All images of your games should be gathered into a small number of image files. Then, using background-image and background-position CSS properties, you create HTML blocks that can  display these images correctly (see example below).

	3°) ... anything else: It is really easy to add and remove CSS classes dynamically from your Javascript with dojo.addClass and dojo.removeClass. It is also easy to check if an element has a class (dojo.hasClass) or to get all elements with a specific class (dojo.query). This is why, very often, using CSS classes for the logic of your user interface allow you to do complex thing easily.
*/

/*
	Example of CSS sprites (a black token and a white token, 20x20px each, embedded in the same "tokens.png" 40x20px image):

	.white_token {
		background-image: url('img/tokens.png');
		background-position: 0px 0px;
	}
	.black_token {
		background-image: url('img/tokens.png');
		background-position: -20px 0px;
	}
	.token {
		width: 20px;
		height: 20px;
		background-repeat: none;
	}
*/

.ewc_setlocarea {
  // background:purple;
}

.ewc_setlocarea_column {
  // background:pink;

  float: left;
  width: 50%;
}

@media screen and (max-width: 1500px) {
  .ewc_setlocarea_column {
    width: 100%;
  }
}

.ewc_setloc_panel {
  // background:red;
  margin: 4px;
}

.ewc_setloc_panel div {
  display: inline-block;
}

.ewc_setloc_location {
  // margin-left: -41px;

  // Let's get the puzzle pieces to overlap!
  z-index: 40;
  position: relative;
  margin-left: -42px;
}

.ewc_setloc_setting {
  clip-path: url(#ewc_clip_puzzle);

  // Let's get the puzzle pieces to overlap!
  z-index: 45;
  position: relative;
}

.ewc_card {
  border: 1px solid #333333;
  filter: drop-shadow(4px 4px 3px #555555);
}

// Wraps both the setting and location within the setloc panel.
.ewc_setloc_setloc_wrap {
  border: 1px solid #333333;
  filter: drop-shadow(4px 4px 3px #555555);
}

// XXX: Maybe this gets replaced with a "within playarea" selector for .ewc_card?
.ewc_card_playarea {
  // XXX: Can we make this scaling-agnostic?
  margin-right: -80px;
}

.ewc_card_wrap {
}

.ewc_setloc_cards_wrap {
}

.ewc_setloc_cards {
  position: relative;
  padding: 5px;
  padding-left: 15px;  // Creates the space between the cards and the setloc.

  // transform-origin: top left;
  //
  // width: 33%;
  // height: 33%;
}

.tmp_card_scaling {
  // transform: scale(.3);
}

.ewc_playercolor_bg_blue {
  background-color: #001489;
}
.ewc_playercolor_bg_pink {
  background-color: #ff5fa2;
}
.ewc_playercolor_bg_teal {
  background-color: #00b796;
}
.ewc_playercolor_bg_yellow {
  background-color: #ffe900;
}
.ewc_playercolor_bg_white {
  background-color: #ffffff;
}

// .tmp_tint_effort_cube {
//   background-blend-mode: multiply;

//   /* XXX: These are copied to match the background, background-position,
//    and background-size properties.  We should autogenerate this for
//    the images where we need it. */
//   mask-image: url('img/sprites.png');
//   -webkit-mask-image: url('img/sprites.png');
//   mask-position: -902px -110px;
//   -webkit-mask-position: -902px -110px;
//   mask-size: 981px 887px;
//   -webkit-mask-size: 981px 887px;
// }


.ewc_effort_counter_wrap {
  width: 90px;
}

.ewc_effort_counter {
  text-align: center;
  width: 50px;
  position: relative;
  margin: 5px auto 0 auto;

  border-radius: 20%/50%;
  border: 2px solid #888;

  background: #555;
  opacity: 80%;
  color: #ccc;
}

// XXX: This offsets a single cube into the lower right part of the setting area.
.ewc_effort_counter_wrap {
  // display: flex;
  // margin-top: 175px;
  // margin-left: 65px;

  position:absolute;
  // bottom:0px;
  // right:10px;
  // margin-right:30px;  // This accounts for the overlapped part of the "setting" puzzle piece.

  // Because of how the "pill shape" is constructed, the div is actually much wider than it appears; if we fixed that,
  // we'd need to increase `right` or `margin-right` here to account for the overlapped part of the "setting" puzzle
  // piece.
  bottom: 5px;
  right: 8px;
}

// All children.  XXX: This doesn't actually appear to work; the cubes are still translucent!
.ewc_effort_counter * {
  opacity: 100%;
}

.tmp_offset_cube {
  vertical-align: text-top;
}

// // XXX: This is necessary to get `display:flex` to override the ".ewc_setloc_panel div" rule.
// .ewc_setloc_panel .ewc_effort_counter {
//   // display: flex;
// }

// // XXX: This is necessary to get `display:flex` to override the ".ewc_setloc_panel div" rule.
// .ewc_setloc_panel .ewc_effort_counter_wrap {
//   // display: flex;
//   margin-top: 175px;
//   margin-left: 65px;
// }
